{"remainingRequest":"F:\\JavaProject\\demo\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\JavaProject\\demo\\src\\views\\Login.vue?vue&type=style&index=0&id=26084dc2&lang=less&scoped=true","dependencies":[{"path":"F:\\JavaProject\\demo\\src\\views\\Login.vue","mtime":1719821385644},{"path":"F:\\JavaProject\\demo\\node_modules\\css-loader\\dist\\cjs.js","mtime":1719822893917},{"path":"F:\\JavaProject\\demo\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1719822895359},{"path":"F:\\JavaProject\\demo\\node_modules\\postcss-loader\\src\\index.js","mtime":1719822894415},{"path":"F:\\JavaProject\\demo\\node_modules\\less-loader\\dist\\cjs.js","mtime":1719822894235},{"path":"F:\\JavaProject\\demo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1719822893485},{"path":"F:\\JavaProject\\demo\\node_modules\\vue-loader\\lib\\index.js","mtime":1719822894855}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoudGl0bGUgew0KICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogIG1hcmdpbi10b3A6IDUwcHg7DQp9DQouYm94IHsNCiAgd2lkdGg6IDQwMHB4Ow0KICBoZWlnaHQ6IDIwMHB4Ow0KICBib3gtc2hhZG93OiAwIDAgNXB4IDVweCByZ2JhKDEzNCwgMTM0LCAxMzQsIDAuMSk7DQogIG1hcmdpbjogMjBweCBhdXRvOw0KICBwYWRkaW5nOiAzMHB4Ow0KfQ0K"},{"version":3,"sources":["Login.vue"],"names":[],"mappings":";AAwHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Login.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div>\r\n    <h2 class=\"title\">登录界面</h2>\r\n    <!-- \r\n        el-form\r\n            model\t         表单数据对象\tobject\r\n            status-icon    是否在输入框中显示校验结果反馈图标\tboolean\r\n            rules\t         表单验证规则\tobject\r\n            ref=\"ruleForm\" 获取DOM元素\r\n            label-width=\"100px\" 文本宽度\r\n            方法：\r\n              validate()\t对整个表单进行校验的方法，参数为一个回调函数。该回调函数会在校验结束后被调用，并传入两个参数：是否校验成功和未通过校验的字段。若不传入回调函数，则会返回一个 promise\r\n\r\n              resetFields()\t对整个表单进行重置，将所有字段值重置为初始值并移除校验结果\r\n\r\n          el-form-item \r\n            表单的每一项内容 \r\n              label=\"账号\"      标题标签文本\r\n              prop=\"username\"  表单域 model 字段，在使用 validate、resetFields 方法的情况下，该属性是必填的\r\n     -->\r\n    <div class=\"box\">\r\n      <el-form\r\n        :model=\"loginForm\"\r\n        status-icon\r\n        :rules=\"rules\"\r\n        ref=\"ruleForm\"\r\n        label-width=\"60px\"\r\n        class=\"demo-ruleForm\"\r\n      >\r\n        <el-form-item label=\"账号\" prop=\"username\">\r\n          <el-input type=\"text\" v-model=\"loginForm.username\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"密码\" prop=\"password\">\r\n          <el-input type=\"password\" v-model=\"loginForm.password\"></el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"submitForm('ruleForm')\"\r\n            >提交</el-button\r\n          >\r\n          <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//1. 安装 jwt-decode  2. 导入\r\nimport jwt from 'jwt-decode'\r\nexport default {\r\n  data() {\r\n    var validateUser = (rule, value, callback) => {\r\n      if (value === \"\") {\r\n        callback(new Error(\"请输入账号\"));\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n    var validatePass = (rule, value, callback) => {\r\n      if (value === \"\") {\r\n        callback(new Error(\"请输入密码\"));\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n    return {\r\n      loginForm: {\r\n        //表单数据对象\tobject\r\n        username: \"\",\r\n        password: \"\",\r\n      },\r\n      rules: {\r\n        // 表单验证规则\tobject\r\n        username: [{ validator: validateUser, trigger: \"blur\" }],\r\n        password: [{ validator: validatePass, trigger: \"blur\" }],\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    //提交表单事件\r\n    submitForm(formName) {\r\n      this.$refs[formName].validate((valid) => {\r\n        if (valid) {\r\n          console.log(\"校验成功\", this.loginForm);\r\n          //请求登录接口---token -- \r\n          this.$api.getLogin({\r\n            user:this.loginForm.username,\r\n            pwd:this.loginForm.password\r\n          })\r\n          .then(res=>{\r\n            console.log(res.data);\r\n            console.log(jwt(res.data.token));\r\n            //存储数据给vuex实现组件共享数据资源\r\n            let obj={\r\n              token:res.data.token,\r\n              username:jwt(res.data.token).user\r\n            }\r\n            this.$store.commit('LoginModule/setUser',obj)\r\n            //数据持久化\r\n            localStorage.setItem('userinfo',JSON.stringify(obj))\r\n            //跳转到首页\r\n            this.$router.push('/')\r\n          })\r\n\r\n        } else {\r\n          console.log(\"校验失败\");\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    //重置表单事件\r\n    resetForm(formName) {\r\n      this.$refs[formName].resetFields();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang='less' scoped>\r\n.title {\r\n  text-align: center;\r\n  margin-top: 50px;\r\n}\r\n.box {\r\n  width: 400px;\r\n  height: 200px;\r\n  box-shadow: 0 0 5px 5px rgba(134, 134, 134, 0.1);\r\n  margin: 20px auto;\r\n  padding: 30px;\r\n}\r\n</style>"]}]}